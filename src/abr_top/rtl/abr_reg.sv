// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module abr_reg (
        input wire clk,
        input wire rst,

        input wire s_cpuif_req,
        input wire s_cpuif_req_is_wr,
        input wire [15:0] s_cpuif_addr,
        input wire [31:0] s_cpuif_wr_data,
        input wire [31:0] s_cpuif_wr_biten,
        output wire s_cpuif_req_stall_wr,
        output wire s_cpuif_req_stall_rd,
        output wire s_cpuif_rd_ack,
        output wire s_cpuif_rd_err,
        output wire [31:0] s_cpuif_rd_data,
        output wire s_cpuif_wr_ack,
        output wire s_cpuif_wr_err,

        input abr_reg_pkg::abr_reg__in_t hwif_in,
        output abr_reg_pkg::abr_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [15:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    assign cpuif_req = s_cpuif_req;
    assign cpuif_req_is_wr = s_cpuif_req_is_wr;
    assign cpuif_addr = s_cpuif_addr;
    assign cpuif_wr_data = s_cpuif_wr_data;
    assign cpuif_wr_biten = s_cpuif_wr_biten;
    assign s_cpuif_req_stall_wr = cpuif_req_stall_wr;
    assign s_cpuif_req_stall_rd = cpuif_req_stall_rd;
    assign s_cpuif_rd_ack = cpuif_rd_ack;
    assign s_cpuif_rd_err = cpuif_rd_err;
    assign s_cpuif_rd_data = cpuif_rd_data;
    assign s_cpuif_wr_ack = cpuif_wr_ack;
    assign s_cpuif_wr_err = cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            assert(!external_wr_ack || (external_pending | external_req))
                else $error("An external wr_ack strobe was asserted when no external request was active");
            assert(!external_rd_ack || (external_pending | external_req))
                else $error("An external rd_ack strobe was asserted when no external request was active");
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct packed{
        logic [2-1:0]MLDSA_NAME;
        logic [2-1:0]MLDSA_VERSION;
        logic MLDSA_CTRL;
        logic MLDSA_STATUS;
        logic [16-1:0]ABR_ENTROPY;
        logic [8-1:0]MLDSA_SEED;
        logic [8-1:0]MLDSA_SIGN_RND;
        logic [16-1:0]MLDSA_MSG;
        logic [16-1:0]MLDSA_VERIFY_RES;
        logic [16-1:0]MLDSA_EXTERNAL_MU;
        logic MLDSA_MSG_STROBE;
        logic MLDSA_CTX_CONFIG;
        logic [64-1:0]MLDSA_CTX;
        logic MLDSA_PUBKEY;
        logic MLDSA_SIGNATURE;
        logic MLDSA_PRIVKEY_OUT;
        logic MLDSA_PRIVKEY_IN;
        logic kv_mldsa_seed_rd_ctrl;
        logic kv_mldsa_seed_rd_status;
        logic [2-1:0]MLKEM_NAME;
        logic [2-1:0]MLKEM_VERSION;
        logic MLKEM_CTRL;
        logic MLKEM_STATUS;
        logic [8-1:0]MLKEM_SEED_D;
        logic [8-1:0]MLKEM_SEED_Z;
        logic [8-1:0]MLKEM_SHARED_KEY;
        logic MLKEM_MSG;
        logic MLKEM_DECAPS_KEY;
        logic MLKEM_ENCAPS_KEY;
        logic MLKEM_CIPHERTEXT;
        logic kv_mlkem_seed_rd_ctrl;
        logic kv_mlkem_seed_rd_status;
        logic kv_mlkem_msg_rd_ctrl;
        logic kv_mlkem_msg_rd_status;
        logic kv_mlkem_sharedkey_wr_ctrl;
        logic kv_mlkem_sharedkey_wr_status;
        struct packed{
            logic global_intr_en_r;
            logic error_intr_en_r;
            logic notif_intr_en_r;
            logic error_global_intr_r;
            logic notif_global_intr_r;
            logic error_internal_intr_r;
            logic notif_internal_intr_r;
            logic error_intr_trig_r;
            logic notif_intr_trig_r;
            logic error_internal_intr_count_r;
            logic notif_cmd_done_intr_count_r;
            logic error_internal_intr_count_incr_r;
            logic notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [15:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.MLDSA_NAME[i0] = cpuif_req_masked & (cpuif_addr == 16'h0 + i0*16'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.MLDSA_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 16'h8 + i0*16'h4);
        end
        decoded_reg_strb.MLDSA_CTRL = cpuif_req_masked & (cpuif_addr == 16'h10);
        decoded_reg_strb.MLDSA_STATUS = cpuif_req_masked & (cpuif_addr == 16'h14);
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.ABR_ENTROPY[i0] = cpuif_req_masked & (cpuif_addr == 16'h18 + i0*16'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.MLDSA_SEED[i0] = cpuif_req_masked & (cpuif_addr == 16'h58 + i0*16'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.MLDSA_SIGN_RND[i0] = cpuif_req_masked & (cpuif_addr == 16'h78 + i0*16'h4);
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.MLDSA_MSG[i0] = cpuif_req_masked & (cpuif_addr == 16'h98 + i0*16'h4);
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.MLDSA_VERIFY_RES[i0] = cpuif_req_masked & (cpuif_addr == 16'hd8 + i0*16'h4);
        end
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.MLDSA_EXTERNAL_MU[i0] = cpuif_req_masked & (cpuif_addr == 16'h118 + i0*16'h4);
        end
        decoded_reg_strb.MLDSA_MSG_STROBE = cpuif_req_masked & (cpuif_addr == 16'h158);
        decoded_reg_strb.MLDSA_CTX_CONFIG = cpuif_req_masked & (cpuif_addr == 16'h15c);
        for(int i0=0; i0<64; i0++) begin
            decoded_reg_strb.MLDSA_CTX[i0] = cpuif_req_masked & (cpuif_addr == 16'h160 + i0*16'h4);
        end
        decoded_reg_strb.MLDSA_PUBKEY = cpuif_req_masked & (cpuif_addr >= 16'h1000) & (cpuif_addr <= 16'h1000 + 16'ha1f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'h1000) & (cpuif_addr <= 16'h1000 + 16'ha1f);
        decoded_reg_strb.MLDSA_SIGNATURE = cpuif_req_masked & (cpuif_addr >= 16'h2000) & (cpuif_addr <= 16'h2000 + 16'h1213);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'h2000) & (cpuif_addr <= 16'h2000 + 16'h1213);
        decoded_reg_strb.MLDSA_PRIVKEY_OUT = cpuif_req_masked & (cpuif_addr >= 16'h4000) & (cpuif_addr <= 16'h4000 + 16'h131f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'h4000) & (cpuif_addr <= 16'h4000 + 16'h131f);
        decoded_reg_strb.MLDSA_PRIVKEY_IN = cpuif_req_masked & (cpuif_addr >= 16'h6000) & (cpuif_addr <= 16'h6000 + 16'h131f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'h6000) & (cpuif_addr <= 16'h6000 + 16'h131f);
        decoded_reg_strb.kv_mldsa_seed_rd_ctrl = cpuif_req_masked & (cpuif_addr == 16'h7320);
        decoded_reg_strb.kv_mldsa_seed_rd_status = cpuif_req_masked & (cpuif_addr == 16'h7324);
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.MLKEM_NAME[i0] = cpuif_req_masked & (cpuif_addr == 16'h8000 + i0*16'h4);
        end
        for(int i0=0; i0<2; i0++) begin
            decoded_reg_strb.MLKEM_VERSION[i0] = cpuif_req_masked & (cpuif_addr == 16'h8008 + i0*16'h4);
        end
        decoded_reg_strb.MLKEM_CTRL = cpuif_req_masked & (cpuif_addr == 16'h8010);
        decoded_reg_strb.MLKEM_STATUS = cpuif_req_masked & (cpuif_addr == 16'h8014);
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.MLKEM_SEED_D[i0] = cpuif_req_masked & (cpuif_addr == 16'h8018 + i0*16'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.MLKEM_SEED_Z[i0] = cpuif_req_masked & (cpuif_addr == 16'h8038 + i0*16'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == 16'h8038 + i0*16'h4) & cpuif_req_is_wr;
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.MLKEM_SHARED_KEY[i0] = cpuif_req_masked & (cpuif_addr == 16'h8058 + i0*16'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == 16'h8058 + i0*16'h4) & !cpuif_req_is_wr;
        end
        decoded_reg_strb.MLKEM_MSG = cpuif_req_masked & (cpuif_addr >= 16'h8080) & (cpuif_addr <= 16'h8080 + 16'h1f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'h8080) & (cpuif_addr <= 16'h8080 + 16'h1f);
        decoded_reg_strb.MLKEM_DECAPS_KEY = cpuif_req_masked & (cpuif_addr >= 16'h9000) & (cpuif_addr <= 16'h9000 + 16'hc5f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'h9000) & (cpuif_addr <= 16'h9000 + 16'hc5f);
        decoded_reg_strb.MLKEM_ENCAPS_KEY = cpuif_req_masked & (cpuif_addr >= 16'ha000) & (cpuif_addr <= 16'ha000 + 16'h61f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'ha000) & (cpuif_addr <= 16'ha000 + 16'h61f);
        decoded_reg_strb.MLKEM_CIPHERTEXT = cpuif_req_masked & (cpuif_addr >= 16'ha800) & (cpuif_addr <= 16'ha800 + 16'h61f);
        is_external |= cpuif_req_masked & (cpuif_addr >= 16'ha800) & (cpuif_addr <= 16'ha800 + 16'h61f);
        decoded_reg_strb.kv_mlkem_seed_rd_ctrl = cpuif_req_masked & (cpuif_addr == 16'hae20);
        decoded_reg_strb.kv_mlkem_seed_rd_status = cpuif_req_masked & (cpuif_addr == 16'hae24);
        decoded_reg_strb.kv_mlkem_msg_rd_ctrl = cpuif_req_masked & (cpuif_addr == 16'hae28);
        decoded_reg_strb.kv_mlkem_msg_rd_status = cpuif_req_masked & (cpuif_addr == 16'hae2c);
        decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl = cpuif_req_masked & (cpuif_addr == 16'hae30);
        decoded_reg_strb.kv_mlkem_sharedkey_wr_status = cpuif_req_masked & (cpuif_addr == 16'hae34);
        decoded_reg_strb.intr_block_rf.global_intr_en_r = cpuif_req_masked & (cpuif_addr == 16'hb000);
        decoded_reg_strb.intr_block_rf.error_intr_en_r = cpuif_req_masked & (cpuif_addr == 16'hb004);
        decoded_reg_strb.intr_block_rf.notif_intr_en_r = cpuif_req_masked & (cpuif_addr == 16'hb008);
        decoded_reg_strb.intr_block_rf.error_global_intr_r = cpuif_req_masked & (cpuif_addr == 16'hb00c);
        decoded_reg_strb.intr_block_rf.notif_global_intr_r = cpuif_req_masked & (cpuif_addr == 16'hb010);
        decoded_reg_strb.intr_block_rf.error_internal_intr_r = cpuif_req_masked & (cpuif_addr == 16'hb014);
        decoded_reg_strb.intr_block_rf.notif_internal_intr_r = cpuif_req_masked & (cpuif_addr == 16'hb018);
        decoded_reg_strb.intr_block_rf.error_intr_trig_r = cpuif_req_masked & (cpuif_addr == 16'hb01c);
        decoded_reg_strb.intr_block_rf.notif_intr_trig_r = cpuif_req_masked & (cpuif_addr == 16'hb020);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_r = cpuif_req_masked & (cpuif_addr == 16'hb100);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r = cpuif_req_masked & (cpuif_addr == 16'hb180);
        decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 16'hb200);
        decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r = cpuif_req_masked & (cpuif_addr == 16'hb204);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct packed{
        struct packed{
            struct packed{
                logic [2:0] next;
                logic load_next;
            } CTRL;
            struct packed{
                logic next;
                logic load_next;
            } ZEROIZE;
            struct packed{
                logic next;
                logic load_next;
            } PCR_SIGN;
            struct packed{
                logic next;
                logic load_next;
            } EXTERNAL_MU;
            struct packed{
                logic next;
                logic load_next;
            } STREAM_MSG;
        } MLDSA_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
            struct packed{
                logic next;
                logic load_next;
            } ERROR;
        } MLDSA_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } ENTROPY;
        } [16-1:0]ABR_ENTROPY;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } SEED;
        } [8-1:0]MLDSA_SEED;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } SIGN_RND;
        } [8-1:0]MLDSA_SIGN_RND;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } MSG;
        } [16-1:0]MLDSA_MSG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } VERIFY_RES;
        } [16-1:0]MLDSA_VERIFY_RES;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } EXTERNAL_MU;
        } [16-1:0]MLDSA_EXTERNAL_MU;
        struct packed{
            struct packed{
                logic [3:0] next;
                logic load_next;
            } STROBE;
        } MLDSA_MSG_STROBE;
        struct packed{
            struct packed{
                logic [7:0] next;
                logic load_next;
            } CTX_SIZE;
        } MLDSA_CTX_CONFIG;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } CTX;
        } [64-1:0]MLDSA_CTX;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } kv_mldsa_seed_rd_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } kv_mldsa_seed_rd_status;
        struct packed{
            struct packed{
                logic [2:0] next;
                logic load_next;
            } CTRL;
            struct packed{
                logic next;
                logic load_next;
            } ZEROIZE;
        } MLKEM_CTRL;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
            struct packed{
                logic next;
                logic load_next;
            } ERROR;
        } MLKEM_STATUS;
        struct packed{
            struct packed{
                logic [31:0] next;
                logic load_next;
            } SEED;
        } [8-1:0]MLKEM_SEED_D;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } kv_mlkem_seed_rd_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } kv_mlkem_seed_rd_status;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } read_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } read_entry;
            struct packed{
                logic next;
                logic load_next;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] next;
                logic load_next;
            } rsvd;
        } kv_mlkem_msg_rd_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } kv_mlkem_msg_rd_status;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } write_en;
            struct packed{
                logic [4:0] next;
                logic load_next;
            } write_entry;
            struct packed{
                logic next;
                logic load_next;
            } hmac_key_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } hmac_block_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } mldsa_seed_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_pkey_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } ecc_seed_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } aes_key_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } mlkem_seed_dest_valid;
            struct packed{
                logic next;
                logic load_next;
            } mlkem_msg_dest_valid;
            struct packed{
                logic [17:0] next;
                logic load_next;
            } rsvd;
        } kv_mlkem_sharedkey_wr_ctrl;
        struct packed{
            struct packed{
                logic next;
                logic load_next;
            } VALID;
        } kv_mlkem_sharedkey_wr_status;
        struct packed{
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_en;
                struct packed{
                    logic next;
                    logic load_next;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } error_internal_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] next;
                    logic load_next;
                    logic incrthreshold;
                    logic incrsaturate;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic next;
                    logic load_next;
                    logic decrthreshold;
                    logic underflow;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct packed{
        struct packed{
            struct packed{
                logic [2:0] value;
            } CTRL;
            struct packed{
                logic value;
            } ZEROIZE;
            struct packed{
                logic value;
            } PCR_SIGN;
            struct packed{
                logic value;
            } EXTERNAL_MU;
            struct packed{
                logic value;
            } STREAM_MSG;
        } MLDSA_CTRL;
        struct packed{
            struct packed{
                logic value;
            } VALID;
            struct packed{
                logic value;
            } ERROR;
        } MLDSA_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } ENTROPY;
        } [16-1:0]ABR_ENTROPY;
        struct packed{
            struct packed{
                logic [31:0] value;
            } SEED;
        } [8-1:0]MLDSA_SEED;
        struct packed{
            struct packed{
                logic [31:0] value;
            } SIGN_RND;
        } [8-1:0]MLDSA_SIGN_RND;
        struct packed{
            struct packed{
                logic [31:0] value;
            } MSG;
        } [16-1:0]MLDSA_MSG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } VERIFY_RES;
        } [16-1:0]MLDSA_VERIFY_RES;
        struct packed{
            struct packed{
                logic [31:0] value;
            } EXTERNAL_MU;
        } [16-1:0]MLDSA_EXTERNAL_MU;
        struct packed{
            struct packed{
                logic [3:0] value;
            } STROBE;
        } MLDSA_MSG_STROBE;
        struct packed{
            struct packed{
                logic [7:0] value;
            } CTX_SIZE;
        } MLDSA_CTX_CONFIG;
        struct packed{
            struct packed{
                logic [31:0] value;
            } CTX;
        } [64-1:0]MLDSA_CTX;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } kv_mldsa_seed_rd_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } kv_mldsa_seed_rd_status;
        struct packed{
            struct packed{
                logic [2:0] value;
            } CTRL;
            struct packed{
                logic value;
            } ZEROIZE;
        } MLKEM_CTRL;
        struct packed{
            struct packed{
                logic value;
            } VALID;
            struct packed{
                logic value;
            } ERROR;
        } MLKEM_STATUS;
        struct packed{
            struct packed{
                logic [31:0] value;
            } SEED;
        } [8-1:0]MLKEM_SEED_D;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } kv_mlkem_seed_rd_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } kv_mlkem_seed_rd_status;
        struct packed{
            struct packed{
                logic value;
            } read_en;
            struct packed{
                logic [4:0] value;
            } read_entry;
            struct packed{
                logic value;
            } pcr_hash_extend;
            struct packed{
                logic [24:0] value;
            } rsvd;
        } kv_mlkem_msg_rd_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } kv_mlkem_msg_rd_status;
        struct packed{
            struct packed{
                logic value;
            } write_en;
            struct packed{
                logic [4:0] value;
            } write_entry;
            struct packed{
                logic value;
            } hmac_key_dest_valid;
            struct packed{
                logic value;
            } hmac_block_dest_valid;
            struct packed{
                logic value;
            } mldsa_seed_dest_valid;
            struct packed{
                logic value;
            } ecc_pkey_dest_valid;
            struct packed{
                logic value;
            } ecc_seed_dest_valid;
            struct packed{
                logic value;
            } aes_key_dest_valid;
            struct packed{
                logic value;
            } mlkem_seed_dest_valid;
            struct packed{
                logic value;
            } mlkem_msg_dest_valid;
            struct packed{
                logic [17:0] value;
            } rsvd;
        } kv_mlkem_sharedkey_wr_ctrl;
        struct packed{
            struct packed{
                logic value;
            } VALID;
        } kv_mlkem_sharedkey_wr_status;
        struct packed{
            struct packed{
                struct packed{
                    logic value;
                } error_en;
                struct packed{
                    logic value;
                } notif_en;
            } global_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_en;
            } error_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_en;
            } notif_intr_en_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } error_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } agg_sts;
            } notif_global_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_sts;
            } error_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_sts;
            } notif_internal_intr_r;
            struct packed{
                struct packed{
                    logic value;
                } error_internal_trig;
            } error_intr_trig_r;
            struct packed{
                struct packed{
                    logic value;
                } notif_cmd_done_trig;
            } notif_intr_trig_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } error_internal_intr_count_r;
            struct packed{
                struct packed{
                    logic [31:0] value;
                } cnt;
            } notif_cmd_done_intr_count_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } error_internal_intr_count_incr_r;
            struct packed{
                struct packed{
                    logic value;
                } pulse;
            } notif_cmd_done_intr_count_incr_r;
        } intr_block_rf;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: abr_reg.MLDSA_CTRL.CTRL
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_CTRL.CTRL.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_CTRL && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
            next_c = (field_storage.MLDSA_CTRL.CTRL.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end else if(hwif_in.MLDSA_CTRL.CTRL.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_CTRL.CTRL.next = next_c;
        field_combo.MLDSA_CTRL.CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_CTRL.CTRL.value <= 3'h0;
        end else if(field_combo.MLDSA_CTRL.CTRL.load_next) begin
            field_storage.MLDSA_CTRL.CTRL.value <= field_combo.MLDSA_CTRL.CTRL.next;
        end
    end
    assign hwif_out.MLDSA_CTRL.CTRL.value = field_storage.MLDSA_CTRL.CTRL.value;
    // Field: abr_reg.MLDSA_CTRL.ZEROIZE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_CTRL.ZEROIZE.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.MLDSA_CTRL.ZEROIZE.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_CTRL.ZEROIZE.next = next_c;
        field_combo.MLDSA_CTRL.ZEROIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_CTRL.ZEROIZE.value <= 1'h0;
        end else if(field_combo.MLDSA_CTRL.ZEROIZE.load_next) begin
            field_storage.MLDSA_CTRL.ZEROIZE.value <= field_combo.MLDSA_CTRL.ZEROIZE.next;
        end
    end
    assign hwif_out.MLDSA_CTRL.ZEROIZE.value = field_storage.MLDSA_CTRL.ZEROIZE.value;
    // Field: abr_reg.MLDSA_CTRL.PCR_SIGN
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_CTRL.PCR_SIGN.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_CTRL && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
            next_c = (field_storage.MLDSA_CTRL.PCR_SIGN.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.MLDSA_CTRL.PCR_SIGN.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_CTRL.PCR_SIGN.next = next_c;
        field_combo.MLDSA_CTRL.PCR_SIGN.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_CTRL.PCR_SIGN.value <= 1'h0;
        end else if(field_combo.MLDSA_CTRL.PCR_SIGN.load_next) begin
            field_storage.MLDSA_CTRL.PCR_SIGN.value <= field_combo.MLDSA_CTRL.PCR_SIGN.next;
        end
    end
    assign hwif_out.MLDSA_CTRL.PCR_SIGN.value = field_storage.MLDSA_CTRL.PCR_SIGN.value;
    // Field: abr_reg.MLDSA_CTRL.EXTERNAL_MU
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_CTRL.EXTERNAL_MU.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_CTRL && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
            next_c = (field_storage.MLDSA_CTRL.EXTERNAL_MU.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.MLDSA_CTRL.EXTERNAL_MU.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_CTRL.EXTERNAL_MU.next = next_c;
        field_combo.MLDSA_CTRL.EXTERNAL_MU.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_CTRL.EXTERNAL_MU.value <= 1'h0;
        end else if(field_combo.MLDSA_CTRL.EXTERNAL_MU.load_next) begin
            field_storage.MLDSA_CTRL.EXTERNAL_MU.value <= field_combo.MLDSA_CTRL.EXTERNAL_MU.next;
        end
    end
    assign hwif_out.MLDSA_CTRL.EXTERNAL_MU.value = field_storage.MLDSA_CTRL.EXTERNAL_MU.value;
    // Field: abr_reg.MLDSA_CTRL.STREAM_MSG
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_CTRL.STREAM_MSG.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_CTRL && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
            next_c = (field_storage.MLDSA_CTRL.STREAM_MSG.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else if(hwif_in.MLDSA_CTRL.STREAM_MSG.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_CTRL.STREAM_MSG.next = next_c;
        field_combo.MLDSA_CTRL.STREAM_MSG.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_CTRL.STREAM_MSG.value <= 1'h0;
        end else if(field_combo.MLDSA_CTRL.STREAM_MSG.load_next) begin
            field_storage.MLDSA_CTRL.STREAM_MSG.value <= field_combo.MLDSA_CTRL.STREAM_MSG.next;
        end
    end
    assign hwif_out.MLDSA_CTRL.STREAM_MSG.value = field_storage.MLDSA_CTRL.STREAM_MSG.value;
    // Field: abr_reg.MLDSA_STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_STATUS.VALID.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.MLDSA_STATUS.VALID.next;
        load_next_c = '1;
        field_combo.MLDSA_STATUS.VALID.next = next_c;
        field_combo.MLDSA_STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_STATUS.VALID.value <= 1'h0;
        end else if(field_combo.MLDSA_STATUS.VALID.load_next) begin
            field_storage.MLDSA_STATUS.VALID.value <= field_combo.MLDSA_STATUS.VALID.next;
        end
    end
    assign hwif_out.MLDSA_STATUS.VALID.value = field_storage.MLDSA_STATUS.VALID.value;
    // Field: abr_reg.MLDSA_STATUS.ERROR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_STATUS.ERROR.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.MLDSA_STATUS.ERROR.next;
        load_next_c = '1;
        field_combo.MLDSA_STATUS.ERROR.next = next_c;
        field_combo.MLDSA_STATUS.ERROR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_STATUS.ERROR.value <= 1'h0;
        end else if(field_combo.MLDSA_STATUS.ERROR.load_next) begin
            field_storage.MLDSA_STATUS.ERROR.value <= field_combo.MLDSA_STATUS.ERROR.next;
        end
    end
    assign hwif_out.MLDSA_STATUS.ERROR.value = field_storage.MLDSA_STATUS.ERROR.value;
    for(genvar i0=0; i0<16; i0++) begin
        // Field: abr_reg.ABR_ENTROPY[].ENTROPY
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.ABR_ENTROPY[i0].ENTROPY.value;
            load_next_c = '0;
            if(decoded_reg_strb.ABR_ENTROPY[i0] && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
                next_c = (field_storage.ABR_ENTROPY[i0].ENTROPY.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.ABR_ENTROPY[i0].ENTROPY.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.ABR_ENTROPY[i0].ENTROPY.next = next_c;
            field_combo.ABR_ENTROPY[i0].ENTROPY.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.ABR_ENTROPY[i0].ENTROPY.value <= 32'h0;
            end else if(field_combo.ABR_ENTROPY[i0].ENTROPY.load_next) begin
                field_storage.ABR_ENTROPY[i0].ENTROPY.value <= field_combo.ABR_ENTROPY[i0].ENTROPY.next;
            end
        end
        assign hwif_out.ABR_ENTROPY[i0].ENTROPY.value = field_storage.ABR_ENTROPY[i0].ENTROPY.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: abr_reg.MLDSA_SEED[].SEED
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLDSA_SEED[i0].SEED.value;
            load_next_c = '0;
            if(decoded_reg_strb.MLDSA_SEED[i0] && decoded_req_is_wr && hwif_in.MLDSA_SEED[i0].SEED.swwe) begin // SW write
                next_c = (field_storage.MLDSA_SEED[i0].SEED.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.MLDSA_SEED[i0].SEED.we) begin // HW Write - we
                next_c = hwif_in.MLDSA_SEED[i0].SEED.next;
                load_next_c = '1;
            end else if(hwif_in.MLDSA_SEED[i0].SEED.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLDSA_SEED[i0].SEED.next = next_c;
            field_combo.MLDSA_SEED[i0].SEED.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLDSA_SEED[i0].SEED.value <= 32'h0;
            end else if(field_combo.MLDSA_SEED[i0].SEED.load_next) begin
                field_storage.MLDSA_SEED[i0].SEED.value <= field_combo.MLDSA_SEED[i0].SEED.next;
            end
        end
        assign hwif_out.MLDSA_SEED[i0].SEED.value = field_storage.MLDSA_SEED[i0].SEED.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: abr_reg.MLDSA_SIGN_RND[].SIGN_RND
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLDSA_SIGN_RND[i0].SIGN_RND.value;
            load_next_c = '0;
            if(decoded_reg_strb.MLDSA_SIGN_RND[i0] && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
                next_c = (field_storage.MLDSA_SIGN_RND[i0].SIGN_RND.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.MLDSA_SIGN_RND[i0].SIGN_RND.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLDSA_SIGN_RND[i0].SIGN_RND.next = next_c;
            field_combo.MLDSA_SIGN_RND[i0].SIGN_RND.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLDSA_SIGN_RND[i0].SIGN_RND.value <= 32'h0;
            end else if(field_combo.MLDSA_SIGN_RND[i0].SIGN_RND.load_next) begin
                field_storage.MLDSA_SIGN_RND[i0].SIGN_RND.value <= field_combo.MLDSA_SIGN_RND[i0].SIGN_RND.next;
            end
        end
        assign hwif_out.MLDSA_SIGN_RND[i0].SIGN_RND.value = field_storage.MLDSA_SIGN_RND[i0].SIGN_RND.value;
    end
    for(genvar i0=0; i0<16; i0++) begin
        // Field: abr_reg.MLDSA_MSG[].MSG
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLDSA_MSG[i0].MSG.value;
            load_next_c = '0;
            if(decoded_reg_strb.MLDSA_MSG[i0] && decoded_req_is_wr && hwif_in.MLDSA_MSG[i0].MSG.swwe) begin // SW write
                next_c = (field_storage.MLDSA_MSG[i0].MSG.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.MLDSA_MSG[i0].MSG.we) begin // HW Write - we
                next_c = hwif_in.MLDSA_MSG[i0].MSG.next;
                load_next_c = '1;
            end else if(hwif_in.MLDSA_MSG[i0].MSG.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLDSA_MSG[i0].MSG.next = next_c;
            field_combo.MLDSA_MSG[i0].MSG.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLDSA_MSG[i0].MSG.value <= 32'h0;
            end else if(field_combo.MLDSA_MSG[i0].MSG.load_next) begin
                field_storage.MLDSA_MSG[i0].MSG.value <= field_combo.MLDSA_MSG[i0].MSG.next;
            end
        end
        assign hwif_out.MLDSA_MSG[i0].MSG.value = field_storage.MLDSA_MSG[i0].MSG.value;
        assign hwif_out.MLDSA_MSG[i0].MSG.swmod = decoded_reg_strb.MLDSA_MSG[i0] && decoded_req_is_wr;
    end
    for(genvar i0=0; i0<16; i0++) begin
        // Field: abr_reg.MLDSA_VERIFY_RES[].VERIFY_RES
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLDSA_VERIFY_RES[i0].VERIFY_RES.value;
            load_next_c = '0;
            if(hwif_in.MLDSA_VERIFY_RES[i0].VERIFY_RES.we) begin // HW Write - we
                next_c = hwif_in.MLDSA_VERIFY_RES[i0].VERIFY_RES.next;
                load_next_c = '1;
            end else if(hwif_in.MLDSA_VERIFY_RES[i0].VERIFY_RES.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLDSA_VERIFY_RES[i0].VERIFY_RES.next = next_c;
            field_combo.MLDSA_VERIFY_RES[i0].VERIFY_RES.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLDSA_VERIFY_RES[i0].VERIFY_RES.value <= 32'h0;
            end else if(field_combo.MLDSA_VERIFY_RES[i0].VERIFY_RES.load_next) begin
                field_storage.MLDSA_VERIFY_RES[i0].VERIFY_RES.value <= field_combo.MLDSA_VERIFY_RES[i0].VERIFY_RES.next;
            end
        end
        assign hwif_out.MLDSA_VERIFY_RES[i0].VERIFY_RES.value = field_storage.MLDSA_VERIFY_RES[i0].VERIFY_RES.value;
    end
    for(genvar i0=0; i0<16; i0++) begin
        // Field: abr_reg.MLDSA_EXTERNAL_MU[].EXTERNAL_MU
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.value;
            load_next_c = '0;
            if(decoded_reg_strb.MLDSA_EXTERNAL_MU[i0] && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
                next_c = (field_storage.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.we) begin // HW Write - we
                next_c = hwif_in.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.next;
                load_next_c = '1;
            end else if(hwif_in.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.next = next_c;
            field_combo.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.value <= 32'h0;
            end else if(field_combo.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.load_next) begin
                field_storage.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.value <= field_combo.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.next;
            end
        end
        assign hwif_out.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.value = field_storage.MLDSA_EXTERNAL_MU[i0].EXTERNAL_MU.value;
    end
    // Field: abr_reg.MLDSA_MSG_STROBE.STROBE
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_MSG_STROBE.STROBE.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_MSG_STROBE && decoded_req_is_wr && hwif_in.MLDSA_MSG_STROBE.STROBE.swwe) begin // SW write
            next_c = (field_storage.MLDSA_MSG_STROBE.STROBE.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end else if(hwif_in.MLDSA_MSG_STROBE.STROBE.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_MSG_STROBE.STROBE.next = next_c;
        field_combo.MLDSA_MSG_STROBE.STROBE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_MSG_STROBE.STROBE.value <= 4'hf;
        end else if(field_combo.MLDSA_MSG_STROBE.STROBE.load_next) begin
            field_storage.MLDSA_MSG_STROBE.STROBE.value <= field_combo.MLDSA_MSG_STROBE.STROBE.next;
        end
    end
    assign hwif_out.MLDSA_MSG_STROBE.STROBE.value = field_storage.MLDSA_MSG_STROBE.STROBE.value;
    // Field: abr_reg.MLDSA_CTX_CONFIG.CTX_SIZE
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLDSA_CTX_CONFIG.CTX_SIZE.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLDSA_CTX_CONFIG && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
            next_c = (field_storage.MLDSA_CTX_CONFIG.CTX_SIZE.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end else if(hwif_in.MLDSA_CTX_CONFIG.CTX_SIZE.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLDSA_CTX_CONFIG.CTX_SIZE.next = next_c;
        field_combo.MLDSA_CTX_CONFIG.CTX_SIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLDSA_CTX_CONFIG.CTX_SIZE.value <= 8'h0;
        end else if(field_combo.MLDSA_CTX_CONFIG.CTX_SIZE.load_next) begin
            field_storage.MLDSA_CTX_CONFIG.CTX_SIZE.value <= field_combo.MLDSA_CTX_CONFIG.CTX_SIZE.next;
        end
    end
    assign hwif_out.MLDSA_CTX_CONFIG.CTX_SIZE.value = field_storage.MLDSA_CTX_CONFIG.CTX_SIZE.value;
    for(genvar i0=0; i0<64; i0++) begin
        // Field: abr_reg.MLDSA_CTX[].CTX
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLDSA_CTX[i0].CTX.value;
            load_next_c = '0;
            if(decoded_reg_strb.MLDSA_CTX[i0] && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
                next_c = (field_storage.MLDSA_CTX[i0].CTX.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.MLDSA_CTX[i0].CTX.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLDSA_CTX[i0].CTX.next = next_c;
            field_combo.MLDSA_CTX[i0].CTX.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLDSA_CTX[i0].CTX.value <= 32'h0;
            end else if(field_combo.MLDSA_CTX[i0].CTX.load_next) begin
                field_storage.MLDSA_CTX[i0].CTX.value <= field_combo.MLDSA_CTX[i0].CTX.next;
            end
        end
        assign hwif_out.MLDSA_CTX[i0].CTX.value = field_storage.MLDSA_CTX[i0].CTX.value;
    end
    assign hwif_out.MLDSA_PUBKEY.req = decoded_reg_strb.MLDSA_PUBKEY;
    assign hwif_out.MLDSA_PUBKEY.addr = decoded_addr[11:0];
    assign hwif_out.MLDSA_PUBKEY.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLDSA_PUBKEY.wr_data = decoded_wr_data;
    assign hwif_out.MLDSA_PUBKEY.wr_biten = decoded_wr_biten;
    assign hwif_out.MLDSA_SIGNATURE.req = decoded_reg_strb.MLDSA_SIGNATURE;
    assign hwif_out.MLDSA_SIGNATURE.addr = decoded_addr[12:0];
    assign hwif_out.MLDSA_SIGNATURE.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLDSA_SIGNATURE.wr_data = decoded_wr_data;
    assign hwif_out.MLDSA_SIGNATURE.wr_biten = decoded_wr_biten;
    assign hwif_out.MLDSA_PRIVKEY_OUT.req = decoded_reg_strb.MLDSA_PRIVKEY_OUT;
    assign hwif_out.MLDSA_PRIVKEY_OUT.addr = decoded_addr[12:0];
    assign hwif_out.MLDSA_PRIVKEY_OUT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLDSA_PRIVKEY_OUT.wr_data = decoded_wr_data;
    assign hwif_out.MLDSA_PRIVKEY_OUT.wr_biten = decoded_wr_biten;
    assign hwif_out.MLDSA_PRIVKEY_IN.req = decoded_reg_strb.MLDSA_PRIVKEY_IN;
    assign hwif_out.MLDSA_PRIVKEY_IN.addr = decoded_addr[12:0];
    assign hwif_out.MLDSA_PRIVKEY_IN.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLDSA_PRIVKEY_IN.wr_data = decoded_wr_data;
    assign hwif_out.MLDSA_PRIVKEY_IN.wr_biten = decoded_wr_biten;
    // Field: abr_reg.kv_mldsa_seed_rd_ctrl.read_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mldsa_seed_rd_ctrl.read_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mldsa_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mldsa_seed_rd_ctrl.read_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.kv_mldsa_seed_rd_ctrl.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mldsa_seed_rd_ctrl.read_en.next = next_c;
        field_combo.kv_mldsa_seed_rd_ctrl.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mldsa_seed_rd_ctrl.read_en.value <= 1'h0;
        end else if(field_combo.kv_mldsa_seed_rd_ctrl.read_en.load_next) begin
            field_storage.kv_mldsa_seed_rd_ctrl.read_en.value <= field_combo.kv_mldsa_seed_rd_ctrl.read_en.next;
        end
    end
    assign hwif_out.kv_mldsa_seed_rd_ctrl.read_en.value = field_storage.kv_mldsa_seed_rd_ctrl.read_en.value;
    // Field: abr_reg.kv_mldsa_seed_rd_ctrl.read_entry
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mldsa_seed_rd_ctrl.read_entry.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mldsa_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mldsa_seed_rd_ctrl.read_entry.value & ~decoded_wr_biten[5:1]) | (decoded_wr_data[5:1] & decoded_wr_biten[5:1]);
            load_next_c = '1;
        end
        field_combo.kv_mldsa_seed_rd_ctrl.read_entry.next = next_c;
        field_combo.kv_mldsa_seed_rd_ctrl.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mldsa_seed_rd_ctrl.read_entry.value <= 5'h0;
        end else if(field_combo.kv_mldsa_seed_rd_ctrl.read_entry.load_next) begin
            field_storage.kv_mldsa_seed_rd_ctrl.read_entry.value <= field_combo.kv_mldsa_seed_rd_ctrl.read_entry.next;
        end
    end
    assign hwif_out.kv_mldsa_seed_rd_ctrl.read_entry.value = field_storage.kv_mldsa_seed_rd_ctrl.read_entry.value;
    // Field: abr_reg.kv_mldsa_seed_rd_ctrl.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mldsa_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.next = next_c;
        field_combo.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value <= 1'h0;
        end else if(field_combo.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.load_next) begin
            field_storage.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value <= field_combo.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.next;
        end
    end
    assign hwif_out.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value = field_storage.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value;
    // Field: abr_reg.kv_mldsa_seed_rd_ctrl.rsvd
    always_comb begin
        automatic logic [24:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mldsa_seed_rd_ctrl.rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mldsa_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mldsa_seed_rd_ctrl.rsvd.value & ~decoded_wr_biten[31:7]) | (decoded_wr_data[31:7] & decoded_wr_biten[31:7]);
            load_next_c = '1;
        end
        field_combo.kv_mldsa_seed_rd_ctrl.rsvd.next = next_c;
        field_combo.kv_mldsa_seed_rd_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mldsa_seed_rd_ctrl.rsvd.value <= 25'h0;
        end else if(field_combo.kv_mldsa_seed_rd_ctrl.rsvd.load_next) begin
            field_storage.kv_mldsa_seed_rd_ctrl.rsvd.value <= field_combo.kv_mldsa_seed_rd_ctrl.rsvd.next;
        end
    end
    assign hwif_out.kv_mldsa_seed_rd_ctrl.rsvd.value = field_storage.kv_mldsa_seed_rd_ctrl.rsvd.value;
    // Field: abr_reg.kv_mldsa_seed_rd_status.VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mldsa_seed_rd_status.VALID.value;
        load_next_c = '0;
        if(hwif_in.kv_mldsa_seed_rd_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.kv_mldsa_seed_rd_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mldsa_seed_rd_status.VALID.next = next_c;
        field_combo.kv_mldsa_seed_rd_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mldsa_seed_rd_status.VALID.value <= 1'h0;
        end else if(field_combo.kv_mldsa_seed_rd_status.VALID.load_next) begin
            field_storage.kv_mldsa_seed_rd_status.VALID.value <= field_combo.kv_mldsa_seed_rd_status.VALID.next;
        end
    end
    // Field: abr_reg.MLKEM_CTRL.CTRL
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLKEM_CTRL.CTRL.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLKEM_CTRL && decoded_req_is_wr && hwif_in.abr_ready) begin // SW write
            next_c = (field_storage.MLKEM_CTRL.CTRL.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end else if(hwif_in.MLKEM_CTRL.CTRL.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLKEM_CTRL.CTRL.next = next_c;
        field_combo.MLKEM_CTRL.CTRL.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLKEM_CTRL.CTRL.value <= 3'h0;
        end else if(field_combo.MLKEM_CTRL.CTRL.load_next) begin
            field_storage.MLKEM_CTRL.CTRL.value <= field_combo.MLKEM_CTRL.CTRL.next;
        end
    end
    assign hwif_out.MLKEM_CTRL.CTRL.value = field_storage.MLKEM_CTRL.CTRL.value;
    // Field: abr_reg.MLKEM_CTRL.ZEROIZE
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLKEM_CTRL.ZEROIZE.value;
        load_next_c = '0;
        if(decoded_reg_strb.MLKEM_CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.MLKEM_CTRL.ZEROIZE.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.MLKEM_CTRL.ZEROIZE.next = next_c;
        field_combo.MLKEM_CTRL.ZEROIZE.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLKEM_CTRL.ZEROIZE.value <= 1'h0;
        end else if(field_combo.MLKEM_CTRL.ZEROIZE.load_next) begin
            field_storage.MLKEM_CTRL.ZEROIZE.value <= field_combo.MLKEM_CTRL.ZEROIZE.next;
        end
    end
    assign hwif_out.MLKEM_CTRL.ZEROIZE.value = field_storage.MLKEM_CTRL.ZEROIZE.value;
    // Field: abr_reg.MLKEM_STATUS.VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLKEM_STATUS.VALID.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.MLKEM_STATUS.VALID.next;
        load_next_c = '1;
        field_combo.MLKEM_STATUS.VALID.next = next_c;
        field_combo.MLKEM_STATUS.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLKEM_STATUS.VALID.value <= 1'h0;
        end else if(field_combo.MLKEM_STATUS.VALID.load_next) begin
            field_storage.MLKEM_STATUS.VALID.value <= field_combo.MLKEM_STATUS.VALID.next;
        end
    end
    assign hwif_out.MLKEM_STATUS.VALID.value = field_storage.MLKEM_STATUS.VALID.value;
    // Field: abr_reg.MLKEM_STATUS.ERROR
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.MLKEM_STATUS.ERROR.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.MLKEM_STATUS.ERROR.next;
        load_next_c = '1;
        field_combo.MLKEM_STATUS.ERROR.next = next_c;
        field_combo.MLKEM_STATUS.ERROR.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.MLKEM_STATUS.ERROR.value <= 1'h0;
        end else if(field_combo.MLKEM_STATUS.ERROR.load_next) begin
            field_storage.MLKEM_STATUS.ERROR.value <= field_combo.MLKEM_STATUS.ERROR.next;
        end
    end
    assign hwif_out.MLKEM_STATUS.ERROR.value = field_storage.MLKEM_STATUS.ERROR.value;
    for(genvar i0=0; i0<8; i0++) begin
        // Field: abr_reg.MLKEM_SEED_D[].SEED
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.MLKEM_SEED_D[i0].SEED.value;
            load_next_c = '0;
            if(decoded_reg_strb.MLKEM_SEED_D[i0] && decoded_req_is_wr && hwif_in.MLKEM_SEED_D[i0].SEED.swwe) begin // SW write
                next_c = (field_storage.MLKEM_SEED_D[i0].SEED.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end else if(hwif_in.MLKEM_SEED_D[i0].SEED.we) begin // HW Write - we
                next_c = hwif_in.MLKEM_SEED_D[i0].SEED.next;
                load_next_c = '1;
            end else if(hwif_in.MLKEM_SEED_D[i0].SEED.hwclr) begin // HW Clear
                next_c = '0;
                load_next_c = '1;
            end
            field_combo.MLKEM_SEED_D[i0].SEED.next = next_c;
            field_combo.MLKEM_SEED_D[i0].SEED.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge hwif_in.reset_b) begin
            if(~hwif_in.reset_b) begin
                field_storage.MLKEM_SEED_D[i0].SEED.value <= 32'h0;
            end else if(field_combo.MLKEM_SEED_D[i0].SEED.load_next) begin
                field_storage.MLKEM_SEED_D[i0].SEED.value <= field_combo.MLKEM_SEED_D[i0].SEED.next;
            end
        end
        assign hwif_out.MLKEM_SEED_D[i0].SEED.value = field_storage.MLKEM_SEED_D[i0].SEED.value;
    end
    for(genvar i0=0; i0<8; i0++) begin

        assign hwif_out.MLKEM_SEED_Z[i0].req = decoded_req_is_wr ? decoded_reg_strb.MLKEM_SEED_Z[i0] : '0;
        assign hwif_out.MLKEM_SEED_Z[i0].req_is_wr = decoded_req_is_wr;
        assign hwif_out.MLKEM_SEED_Z[i0].wr_data = decoded_wr_data;
        assign hwif_out.MLKEM_SEED_Z[i0].wr_biten = decoded_wr_biten;
    end
    for(genvar i0=0; i0<8; i0++) begin

        assign hwif_out.MLKEM_SHARED_KEY[i0].req = !decoded_req_is_wr ? decoded_reg_strb.MLKEM_SHARED_KEY[i0] : '0;
        assign hwif_out.MLKEM_SHARED_KEY[i0].req_is_wr = decoded_req_is_wr;
    end
    assign hwif_out.MLKEM_MSG.req = decoded_reg_strb.MLKEM_MSG;
    assign hwif_out.MLKEM_MSG.addr = decoded_addr[5:0];
    assign hwif_out.MLKEM_MSG.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLKEM_MSG.wr_data = decoded_wr_data;
    assign hwif_out.MLKEM_MSG.wr_biten = decoded_wr_biten;
    assign hwif_out.MLKEM_DECAPS_KEY.req = decoded_reg_strb.MLKEM_DECAPS_KEY;
    assign hwif_out.MLKEM_DECAPS_KEY.addr = decoded_addr[11:0];
    assign hwif_out.MLKEM_DECAPS_KEY.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLKEM_DECAPS_KEY.wr_data = decoded_wr_data;
    assign hwif_out.MLKEM_DECAPS_KEY.wr_biten = decoded_wr_biten;
    assign hwif_out.MLKEM_ENCAPS_KEY.req = decoded_reg_strb.MLKEM_ENCAPS_KEY;
    assign hwif_out.MLKEM_ENCAPS_KEY.addr = decoded_addr[10:0];
    assign hwif_out.MLKEM_ENCAPS_KEY.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLKEM_ENCAPS_KEY.wr_data = decoded_wr_data;
    assign hwif_out.MLKEM_ENCAPS_KEY.wr_biten = decoded_wr_biten;
    assign hwif_out.MLKEM_CIPHERTEXT.req = decoded_reg_strb.MLKEM_CIPHERTEXT;
    assign hwif_out.MLKEM_CIPHERTEXT.addr = decoded_addr[10:0];
    assign hwif_out.MLKEM_CIPHERTEXT.req_is_wr = decoded_req_is_wr;
    assign hwif_out.MLKEM_CIPHERTEXT.wr_data = decoded_wr_data;
    assign hwif_out.MLKEM_CIPHERTEXT.wr_biten = decoded_wr_biten;
    // Field: abr_reg.kv_mlkem_seed_rd_ctrl.read_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_seed_rd_ctrl.read_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_seed_rd_ctrl.read_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.kv_mlkem_seed_rd_ctrl.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mlkem_seed_rd_ctrl.read_en.next = next_c;
        field_combo.kv_mlkem_seed_rd_ctrl.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_seed_rd_ctrl.read_en.value <= 1'h0;
        end else if(field_combo.kv_mlkem_seed_rd_ctrl.read_en.load_next) begin
            field_storage.kv_mlkem_seed_rd_ctrl.read_en.value <= field_combo.kv_mlkem_seed_rd_ctrl.read_en.next;
        end
    end
    assign hwif_out.kv_mlkem_seed_rd_ctrl.read_en.value = field_storage.kv_mlkem_seed_rd_ctrl.read_en.value;
    // Field: abr_reg.kv_mlkem_seed_rd_ctrl.read_entry
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_seed_rd_ctrl.read_entry.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_seed_rd_ctrl.read_entry.value & ~decoded_wr_biten[5:1]) | (decoded_wr_data[5:1] & decoded_wr_biten[5:1]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_seed_rd_ctrl.read_entry.next = next_c;
        field_combo.kv_mlkem_seed_rd_ctrl.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_seed_rd_ctrl.read_entry.value <= 5'h0;
        end else if(field_combo.kv_mlkem_seed_rd_ctrl.read_entry.load_next) begin
            field_storage.kv_mlkem_seed_rd_ctrl.read_entry.value <= field_combo.kv_mlkem_seed_rd_ctrl.read_entry.next;
        end
    end
    assign hwif_out.kv_mlkem_seed_rd_ctrl.read_entry.value = field_storage.kv_mlkem_seed_rd_ctrl.read_entry.value;
    // Field: abr_reg.kv_mlkem_seed_rd_ctrl.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.next = next_c;
        field_combo.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value <= 1'h0;
        end else if(field_combo.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.load_next) begin
            field_storage.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value <= field_combo.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.next;
        end
    end
    assign hwif_out.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value = field_storage.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value;
    // Field: abr_reg.kv_mlkem_seed_rd_ctrl.rsvd
    always_comb begin
        automatic logic [24:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_seed_rd_ctrl.rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_seed_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_seed_rd_ctrl.rsvd.value & ~decoded_wr_biten[31:7]) | (decoded_wr_data[31:7] & decoded_wr_biten[31:7]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_seed_rd_ctrl.rsvd.next = next_c;
        field_combo.kv_mlkem_seed_rd_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_seed_rd_ctrl.rsvd.value <= 25'h0;
        end else if(field_combo.kv_mlkem_seed_rd_ctrl.rsvd.load_next) begin
            field_storage.kv_mlkem_seed_rd_ctrl.rsvd.value <= field_combo.kv_mlkem_seed_rd_ctrl.rsvd.next;
        end
    end
    assign hwif_out.kv_mlkem_seed_rd_ctrl.rsvd.value = field_storage.kv_mlkem_seed_rd_ctrl.rsvd.value;
    // Field: abr_reg.kv_mlkem_seed_rd_status.VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_seed_rd_status.VALID.value;
        load_next_c = '0;
        if(hwif_in.kv_mlkem_seed_rd_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.kv_mlkem_seed_rd_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mlkem_seed_rd_status.VALID.next = next_c;
        field_combo.kv_mlkem_seed_rd_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_seed_rd_status.VALID.value <= 1'h0;
        end else if(field_combo.kv_mlkem_seed_rd_status.VALID.load_next) begin
            field_storage.kv_mlkem_seed_rd_status.VALID.value <= field_combo.kv_mlkem_seed_rd_status.VALID.next;
        end
    end
    // Field: abr_reg.kv_mlkem_msg_rd_ctrl.read_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_msg_rd_ctrl.read_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_msg_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_msg_rd_ctrl.read_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.kv_mlkem_msg_rd_ctrl.read_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mlkem_msg_rd_ctrl.read_en.next = next_c;
        field_combo.kv_mlkem_msg_rd_ctrl.read_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_msg_rd_ctrl.read_en.value <= 1'h0;
        end else if(field_combo.kv_mlkem_msg_rd_ctrl.read_en.load_next) begin
            field_storage.kv_mlkem_msg_rd_ctrl.read_en.value <= field_combo.kv_mlkem_msg_rd_ctrl.read_en.next;
        end
    end
    assign hwif_out.kv_mlkem_msg_rd_ctrl.read_en.value = field_storage.kv_mlkem_msg_rd_ctrl.read_en.value;
    // Field: abr_reg.kv_mlkem_msg_rd_ctrl.read_entry
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_msg_rd_ctrl.read_entry.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_msg_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_msg_rd_ctrl.read_entry.value & ~decoded_wr_biten[5:1]) | (decoded_wr_data[5:1] & decoded_wr_biten[5:1]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_msg_rd_ctrl.read_entry.next = next_c;
        field_combo.kv_mlkem_msg_rd_ctrl.read_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_msg_rd_ctrl.read_entry.value <= 5'h0;
        end else if(field_combo.kv_mlkem_msg_rd_ctrl.read_entry.load_next) begin
            field_storage.kv_mlkem_msg_rd_ctrl.read_entry.value <= field_combo.kv_mlkem_msg_rd_ctrl.read_entry.next;
        end
    end
    assign hwif_out.kv_mlkem_msg_rd_ctrl.read_entry.value = field_storage.kv_mlkem_msg_rd_ctrl.read_entry.value;
    // Field: abr_reg.kv_mlkem_msg_rd_ctrl.pcr_hash_extend
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_msg_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.next = next_c;
        field_combo.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value <= 1'h0;
        end else if(field_combo.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.load_next) begin
            field_storage.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value <= field_combo.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.next;
        end
    end
    assign hwif_out.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value = field_storage.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value;
    // Field: abr_reg.kv_mlkem_msg_rd_ctrl.rsvd
    always_comb begin
        automatic logic [24:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_msg_rd_ctrl.rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_msg_rd_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_msg_rd_ctrl.rsvd.value & ~decoded_wr_biten[31:7]) | (decoded_wr_data[31:7] & decoded_wr_biten[31:7]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_msg_rd_ctrl.rsvd.next = next_c;
        field_combo.kv_mlkem_msg_rd_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_msg_rd_ctrl.rsvd.value <= 25'h0;
        end else if(field_combo.kv_mlkem_msg_rd_ctrl.rsvd.load_next) begin
            field_storage.kv_mlkem_msg_rd_ctrl.rsvd.value <= field_combo.kv_mlkem_msg_rd_ctrl.rsvd.next;
        end
    end
    assign hwif_out.kv_mlkem_msg_rd_ctrl.rsvd.value = field_storage.kv_mlkem_msg_rd_ctrl.rsvd.value;
    // Field: abr_reg.kv_mlkem_msg_rd_status.VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_msg_rd_status.VALID.value;
        load_next_c = '0;
        if(hwif_in.kv_mlkem_msg_rd_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.kv_mlkem_msg_rd_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mlkem_msg_rd_status.VALID.next = next_c;
        field_combo.kv_mlkem_msg_rd_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_msg_rd_status.VALID.value <= 1'h0;
        end else if(field_combo.kv_mlkem_msg_rd_status.VALID.load_next) begin
            field_storage.kv_mlkem_msg_rd_status.VALID.value <= field_combo.kv_mlkem_msg_rd_status.VALID.next;
        end
    end
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.write_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.write_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.write_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.kv_mlkem_sharedkey_wr_ctrl.write_en.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.write_en.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.write_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.write_en.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.write_en.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.write_en.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.write_en.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.write_en.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.write_en.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.write_entry
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.write_entry.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.write_entry.value & ~decoded_wr_biten[5:1]) | (decoded_wr_data[5:1] & decoded_wr_biten[5:1]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.write_entry.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.write_entry.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.write_entry.value <= 5'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.write_entry.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.write_entry.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.write_entry.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.write_entry.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.write_entry.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value & ~decoded_wr_biten[10:10]) | (decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value & ~decoded_wr_biten[11:11]) | (decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value & ~decoded_wr_biten[12:12]) | (decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value & ~decoded_wr_biten[13:13]) | (decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_ctrl.rsvd
    always_comb begin
        automatic logic [17:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_ctrl.rsvd.value;
        load_next_c = '0;
        if(decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.kv_mlkem_sharedkey_wr_ctrl.rsvd.value & ~decoded_wr_biten[31:14]) | (decoded_wr_data[31:14] & decoded_wr_biten[31:14]);
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_ctrl.rsvd.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_ctrl.rsvd.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.rsvd.value <= 18'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_ctrl.rsvd.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_ctrl.rsvd.value <= field_combo.kv_mlkem_sharedkey_wr_ctrl.rsvd.next;
        end
    end
    assign hwif_out.kv_mlkem_sharedkey_wr_ctrl.rsvd.value = field_storage.kv_mlkem_sharedkey_wr_ctrl.rsvd.value;
    // Field: abr_reg.kv_mlkem_sharedkey_wr_status.VALID
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.kv_mlkem_sharedkey_wr_status.VALID.value;
        load_next_c = '0;
        if(hwif_in.kv_mlkem_sharedkey_wr_status.VALID.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(hwif_in.kv_mlkem_sharedkey_wr_status.VALID.hwclr) begin // HW Clear
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.kv_mlkem_sharedkey_wr_status.VALID.next = next_c;
        field_combo.kv_mlkem_sharedkey_wr_status.VALID.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.kv_mlkem_sharedkey_wr_status.VALID.value <= 1'h0;
        end else if(field_combo.kv_mlkem_sharedkey_wr_status.VALID.load_next) begin
            field_storage.kv_mlkem_sharedkey_wr_status.VALID.value <= field_combo.kv_mlkem_sharedkey_wr_status.VALID.next;
        end
    end
    // Field: abr_reg.intr_block_rf.global_intr_en_r.error_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.error_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.error_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.error_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.error_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.error_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.error_en.value <= field_combo.intr_block_rf.global_intr_en_r.error_en.next;
        end
    end
    // Field: abr_reg.intr_block_rf.global_intr_en_r.notif_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.global_intr_en_r.notif_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.global_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.global_intr_en_r.notif_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.global_intr_en_r.notif_en.next = next_c;
        field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.global_intr_en_r.notif_en.load_next) begin
            field_storage.intr_block_rf.global_intr_en_r.notif_en.value <= field_combo.intr_block_rf.global_intr_en_r.notif_en.next;
        end
    end
    // Field: abr_reg.intr_block_rf.error_intr_en_r.error_internal_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next = next_c;
        field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_en_r.error_internal_en.load_next) begin
            field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value <= field_combo.intr_block_rf.error_intr_en_r.error_internal_en.next;
        end
    end
    // Field: abr_reg.intr_block_rf.notif_intr_en_r.notif_cmd_done_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_en_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next = next_c;
        field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.load_next) begin
            field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value <= field_combo.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.next;
        end
    end
    // Field: abr_reg.intr_block_rf.error_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.error_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.error_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.error_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_global_intr_r.intr =
        |(field_storage.intr_block_rf.error_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.error_en.value);
    // Field: abr_reg.intr_block_rf.notif_global_intr_r.agg_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_out.intr_block_rf.notif_internal_intr_r.intr;
        load_next_c = '1;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next = next_c;
        field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_global_intr_r.agg_sts.load_next) begin
            field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value <= field_combo.intr_block_rf.notif_global_intr_r.agg_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_global_intr_r.intr =
        |(field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value & field_storage.intr_block_rf.global_intr_en_r.notif_en.value);
    // Field: abr_reg.intr_block_rf.error_internal_intr_r.error_internal_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value | field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.error_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value <= field_combo.intr_block_rf.error_internal_intr_r.error_internal_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.error_internal_intr_r.intr =
        |(field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value & field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value);
    // Field: abr_reg.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value != '0) begin // stickybit
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value | field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end else if(decoded_reg_strb.intr_block_rf.notif_internal_intr_r && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next = next_c;
        field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.load_next) begin
            field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value <= field_combo.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.next;
        end
    end
    assign hwif_out.intr_block_rf.notif_internal_intr_r.intr =
        |(field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value & field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value);
    // Field: abr_reg.intr_block_rf.error_intr_trig_r.error_internal_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next = next_c;
        field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.load_next) begin
            field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value <= field_combo.intr_block_rf.error_intr_trig_r.error_internal_trig.next;
        end
    end
    // Field: abr_reg.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_intr_trig_r && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next = next_c;
        field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.load_next) begin
            field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value <= field_combo.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.next;
        end
    end
    // Field: abr_reg.intr_block_rf.error_internal_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.hard_reset_b) begin
        if(~hwif_in.hard_reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value <= field_combo.intr_block_rf.error_internal_intr_count_r.cnt.next;
        end
    end
    // Field: abr_reg.intr_block_rf.notif_cmd_done_intr_count_r.cnt
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // increment
            if(((33)'(next_c) + 32'h1) > 32'hffffffff) begin // up-counter saturated
                next_c = 32'hffffffff;
            end else begin
                next_c = next_c + 32'h1;
            end
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 32'hffffffff);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.incrsaturate = (field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value >= 32'hffffffff);
        if(next_c > 32'hffffffff) begin
            next_c = 32'hffffffff;
            load_next_c = '1;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= 32'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_r.cnt.next;
        end
    end
    // Field: abr_reg.intr_block_rf.error_internal_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.error_internal_intr_r.error_internal_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.error_internal_intr_count_incr_r.pulse.next;
        end
    end
    // Field: abr_reg.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value;
        load_next_c = '0;
        if(field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value) begin // HW Write - we
            next_c = field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value;
            load_next_c = '1;
        end else if(hwif_in.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        if(field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value) begin // decrement
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = (next_c < (1'h1));
            next_c = next_c - 1'h1;
            load_next_c = '1;
        end else begin
            field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.underflow = '0;
        end
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.decrthreshold = (field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 1'd0);
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next = next_c;
        field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge hwif_in.reset_b) begin
        if(~hwif_in.reset_b) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= 1'h0;
        end else if(field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.load_next) begin
            field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value <= field_combo.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.MLDSA_PUBKEY.wr_ack;
        wr_ack |= hwif_in.MLDSA_SIGNATURE.wr_ack;
        wr_ack |= hwif_in.MLDSA_PRIVKEY_OUT.wr_ack;
        wr_ack |= hwif_in.MLDSA_PRIVKEY_IN.wr_ack;
        for(int i0=0; i0<8; i0++) begin
            wr_ack |= hwif_in.MLKEM_SEED_Z[i0].wr_ack;
        end
        wr_ack |= hwif_in.MLKEM_MSG.wr_ack;
        wr_ack |= hwif_in.MLKEM_DECAPS_KEY.wr_ack;
        wr_ack |= hwif_in.MLKEM_ENCAPS_KEY.wr_ack;
        wr_ack |= hwif_in.MLKEM_CIPHERTEXT.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.MLDSA_PUBKEY.rd_ack;
        rd_ack |= hwif_in.MLDSA_SIGNATURE.rd_ack;
        rd_ack |= hwif_in.MLDSA_PRIVKEY_OUT.rd_ack;
        rd_ack |= hwif_in.MLDSA_PRIVKEY_IN.rd_ack;
        for(int i0=0; i0<8; i0++) begin
            rd_ack |= hwif_in.MLKEM_SHARED_KEY[i0].rd_ack;
        end
        rd_ack |= hwif_in.MLKEM_MSG.rd_ack;
        rd_ack |= hwif_in.MLKEM_DECAPS_KEY.rd_ack;
        rd_ack |= hwif_in.MLKEM_ENCAPS_KEY.rd_ack;
        rd_ack |= hwif_in.MLKEM_CIPHERTEXT.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [63-1:0][31:0] readback_array;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 0][31:0] = (decoded_reg_strb.MLDSA_NAME[i0] && !decoded_req_is_wr) ? hwif_in.MLDSA_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 2][31:0] = (decoded_reg_strb.MLDSA_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.MLDSA_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[4][0:0] = (decoded_reg_strb.MLDSA_STATUS && !decoded_req_is_wr) ? hwif_in.MLDSA_STATUS.READY.next : '0;
    assign readback_array[4][1:1] = (decoded_reg_strb.MLDSA_STATUS && !decoded_req_is_wr) ? field_storage.MLDSA_STATUS.VALID.value : '0;
    assign readback_array[4][2:2] = (decoded_reg_strb.MLDSA_STATUS && !decoded_req_is_wr) ? hwif_in.MLDSA_STATUS.MSG_STREAM_READY.next : '0;
    assign readback_array[4][3:3] = (decoded_reg_strb.MLDSA_STATUS && !decoded_req_is_wr) ? field_storage.MLDSA_STATUS.ERROR.value : '0;
    assign readback_array[4][31:4] = '0;
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0*1 + 5][31:0] = (decoded_reg_strb.MLDSA_VERIFY_RES[i0] && !decoded_req_is_wr) ? field_storage.MLDSA_VERIFY_RES[i0].VERIFY_RES.value : '0;
    end
    assign readback_array[21] = hwif_in.MLDSA_PUBKEY.rd_ack ? hwif_in.MLDSA_PUBKEY.rd_data : '0;
    assign readback_array[22] = hwif_in.MLDSA_SIGNATURE.rd_ack ? hwif_in.MLDSA_SIGNATURE.rd_data : '0;
    assign readback_array[23] = hwif_in.MLDSA_PRIVKEY_OUT.rd_ack ? hwif_in.MLDSA_PRIVKEY_OUT.rd_data : '0;
    assign readback_array[24] = hwif_in.MLDSA_PRIVKEY_IN.rd_ack ? hwif_in.MLDSA_PRIVKEY_IN.rd_data : '0;
    assign readback_array[25][0:0] = (decoded_reg_strb.kv_mldsa_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mldsa_seed_rd_ctrl.read_en.value : '0;
    assign readback_array[25][5:1] = (decoded_reg_strb.kv_mldsa_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mldsa_seed_rd_ctrl.read_entry.value : '0;
    assign readback_array[25][6:6] = (decoded_reg_strb.kv_mldsa_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mldsa_seed_rd_ctrl.pcr_hash_extend.value : '0;
    assign readback_array[25][31:7] = (decoded_reg_strb.kv_mldsa_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mldsa_seed_rd_ctrl.rsvd.value : '0;
    assign readback_array[26][0:0] = (decoded_reg_strb.kv_mldsa_seed_rd_status && !decoded_req_is_wr) ? hwif_in.kv_mldsa_seed_rd_status.READY.next : '0;
    assign readback_array[26][1:1] = (decoded_reg_strb.kv_mldsa_seed_rd_status && !decoded_req_is_wr) ? field_storage.kv_mldsa_seed_rd_status.VALID.value : '0;
    assign readback_array[26][9:2] = (decoded_reg_strb.kv_mldsa_seed_rd_status && !decoded_req_is_wr) ? hwif_in.kv_mldsa_seed_rd_status.ERROR.next : '0;
    assign readback_array[26][31:10] = '0;
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 27][31:0] = (decoded_reg_strb.MLKEM_NAME[i0] && !decoded_req_is_wr) ? hwif_in.MLKEM_NAME[i0].NAME.next : '0;
    end
    for(genvar i0=0; i0<2; i0++) begin
        assign readback_array[i0*1 + 29][31:0] = (decoded_reg_strb.MLKEM_VERSION[i0] && !decoded_req_is_wr) ? hwif_in.MLKEM_VERSION[i0].VERSION.next : '0;
    end
    assign readback_array[31][0:0] = (decoded_reg_strb.MLKEM_STATUS && !decoded_req_is_wr) ? hwif_in.MLKEM_STATUS.READY.next : '0;
    assign readback_array[31][1:1] = (decoded_reg_strb.MLKEM_STATUS && !decoded_req_is_wr) ? field_storage.MLKEM_STATUS.VALID.value : '0;
    assign readback_array[31][2:2] = (decoded_reg_strb.MLKEM_STATUS && !decoded_req_is_wr) ? field_storage.MLKEM_STATUS.ERROR.value : '0;
    assign readback_array[31][31:3] = '0;
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0*1 + 32] = hwif_in.MLKEM_SHARED_KEY[i0].rd_ack ? hwif_in.MLKEM_SHARED_KEY[i0].rd_data : '0;
    end
    assign readback_array[40] = hwif_in.MLKEM_MSG.rd_ack ? hwif_in.MLKEM_MSG.rd_data : '0;
    assign readback_array[41] = hwif_in.MLKEM_DECAPS_KEY.rd_ack ? hwif_in.MLKEM_DECAPS_KEY.rd_data : '0;
    assign readback_array[42] = hwif_in.MLKEM_ENCAPS_KEY.rd_ack ? hwif_in.MLKEM_ENCAPS_KEY.rd_data : '0;
    assign readback_array[43] = hwif_in.MLKEM_CIPHERTEXT.rd_ack ? hwif_in.MLKEM_CIPHERTEXT.rd_data : '0;
    assign readback_array[44][0:0] = (decoded_reg_strb.kv_mlkem_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_seed_rd_ctrl.read_en.value : '0;
    assign readback_array[44][5:1] = (decoded_reg_strb.kv_mlkem_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_seed_rd_ctrl.read_entry.value : '0;
    assign readback_array[44][6:6] = (decoded_reg_strb.kv_mlkem_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_seed_rd_ctrl.pcr_hash_extend.value : '0;
    assign readback_array[44][31:7] = (decoded_reg_strb.kv_mlkem_seed_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_seed_rd_ctrl.rsvd.value : '0;
    assign readback_array[45][0:0] = (decoded_reg_strb.kv_mlkem_seed_rd_status && !decoded_req_is_wr) ? hwif_in.kv_mlkem_seed_rd_status.READY.next : '0;
    assign readback_array[45][1:1] = (decoded_reg_strb.kv_mlkem_seed_rd_status && !decoded_req_is_wr) ? field_storage.kv_mlkem_seed_rd_status.VALID.value : '0;
    assign readback_array[45][9:2] = (decoded_reg_strb.kv_mlkem_seed_rd_status && !decoded_req_is_wr) ? hwif_in.kv_mlkem_seed_rd_status.ERROR.next : '0;
    assign readback_array[45][31:10] = '0;
    assign readback_array[46][0:0] = (decoded_reg_strb.kv_mlkem_msg_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_msg_rd_ctrl.read_en.value : '0;
    assign readback_array[46][5:1] = (decoded_reg_strb.kv_mlkem_msg_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_msg_rd_ctrl.read_entry.value : '0;
    assign readback_array[46][6:6] = (decoded_reg_strb.kv_mlkem_msg_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_msg_rd_ctrl.pcr_hash_extend.value : '0;
    assign readback_array[46][31:7] = (decoded_reg_strb.kv_mlkem_msg_rd_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_msg_rd_ctrl.rsvd.value : '0;
    assign readback_array[47][0:0] = (decoded_reg_strb.kv_mlkem_msg_rd_status && !decoded_req_is_wr) ? hwif_in.kv_mlkem_msg_rd_status.READY.next : '0;
    assign readback_array[47][1:1] = (decoded_reg_strb.kv_mlkem_msg_rd_status && !decoded_req_is_wr) ? field_storage.kv_mlkem_msg_rd_status.VALID.value : '0;
    assign readback_array[47][9:2] = (decoded_reg_strb.kv_mlkem_msg_rd_status && !decoded_req_is_wr) ? hwif_in.kv_mlkem_msg_rd_status.ERROR.next : '0;
    assign readback_array[47][31:10] = '0;
    assign readback_array[48][0:0] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.write_en.value : '0;
    assign readback_array[48][5:1] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.write_entry.value : '0;
    assign readback_array[48][6:6] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_key_dest_valid.value : '0;
    assign readback_array[48][7:7] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.hmac_block_dest_valid.value : '0;
    assign readback_array[48][8:8] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.mldsa_seed_dest_valid.value : '0;
    assign readback_array[48][9:9] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_pkey_dest_valid.value : '0;
    assign readback_array[48][10:10] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.ecc_seed_dest_valid.value : '0;
    assign readback_array[48][11:11] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.aes_key_dest_valid.value : '0;
    assign readback_array[48][12:12] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_seed_dest_valid.value : '0;
    assign readback_array[48][13:13] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.mlkem_msg_dest_valid.value : '0;
    assign readback_array[48][31:14] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_ctrl && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_ctrl.rsvd.value : '0;
    assign readback_array[49][0:0] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_status && !decoded_req_is_wr) ? hwif_in.kv_mlkem_sharedkey_wr_status.READY.next : '0;
    assign readback_array[49][1:1] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_status && !decoded_req_is_wr) ? field_storage.kv_mlkem_sharedkey_wr_status.VALID.value : '0;
    assign readback_array[49][9:2] = (decoded_reg_strb.kv_mlkem_sharedkey_wr_status && !decoded_req_is_wr) ? hwif_in.kv_mlkem_sharedkey_wr_status.ERROR.next : '0;
    assign readback_array[49][31:10] = '0;
    assign readback_array[50][0:0] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.error_en.value : '0;
    assign readback_array[50][1:1] = (decoded_reg_strb.intr_block_rf.global_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.global_intr_en_r.notif_en.value : '0;
    assign readback_array[50][31:2] = '0;
    assign readback_array[51][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_en_r.error_internal_en.value : '0;
    assign readback_array[51][31:1] = '0;
    assign readback_array[52][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_en_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_en_r.notif_cmd_done_en.value : '0;
    assign readback_array[52][31:1] = '0;
    assign readback_array[53][0:0] = (decoded_reg_strb.intr_block_rf.error_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_global_intr_r.agg_sts.value : '0;
    assign readback_array[53][31:1] = '0;
    assign readback_array[54][0:0] = (decoded_reg_strb.intr_block_rf.notif_global_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_global_intr_r.agg_sts.value : '0;
    assign readback_array[54][31:1] = '0;
    assign readback_array[55][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_r.error_internal_sts.value : '0;
    assign readback_array[55][31:1] = '0;
    assign readback_array[56][0:0] = (decoded_reg_strb.intr_block_rf.notif_internal_intr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_internal_intr_r.notif_cmd_done_sts.value : '0;
    assign readback_array[56][31:1] = '0;
    assign readback_array[57][0:0] = (decoded_reg_strb.intr_block_rf.error_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_intr_trig_r.error_internal_trig.value : '0;
    assign readback_array[57][31:1] = '0;
    assign readback_array[58][0:0] = (decoded_reg_strb.intr_block_rf.notif_intr_trig_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_intr_trig_r.notif_cmd_done_trig.value : '0;
    assign readback_array[58][31:1] = '0;
    assign readback_array[59][31:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_r.cnt.value : '0;
    assign readback_array[60][31:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_r.cnt.value : '0;
    assign readback_array[61][0:0] = (decoded_reg_strb.intr_block_rf.error_internal_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.error_internal_intr_count_incr_r.pulse.value : '0;
    assign readback_array[61][31:1] = '0;
    assign readback_array[62][0:0] = (decoded_reg_strb.intr_block_rf.notif_cmd_done_intr_count_incr_r && !decoded_req_is_wr) ? field_storage.intr_block_rf.notif_cmd_done_intr_count_incr_r.pulse.value : '0;
    assign readback_array[62][31:1] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<63; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;

`ABR_ASSERT_KNOWN(ERR_HWIF_IN, hwif_in, clk, !hwif_in.hard_reset_b)

endmodule
